CMAKE_MINIMUM_REQUIRED(VERSION 3.7.1)

PROJECT(liggghts)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cMake)

SET(ENABLE_SQ OFF CACHE BOOL "Disable Superquadrics by Default")

# 9 normal models
SET(ENABLE_HERTZ ON CACHE BOOL "HERTZ Model")
SET(ENABLE_HOOKE OFF CACHE BOOL "HOOKE Model")
SET(ENABLE_HOOKE_HYSTERESIS OFF CACHE BOOL "HOOKE_HYSTERESIS Model")
SET(ENABLE_HOOKE_STIFFNESS OFF CACHE BOOL "HOOKE_STIFFNESS Model")
SET(ENABLE_EDINBURGH OFF CACHE BOOL "EDINBURGH Model")
SET(ENABLE_EDINBURGH_STIFFNESS OFF CACHE BOOL "EDINBURGH_STIFFNESS Model")
SET(ENABLE_HERTZ_STIFFNESS OFF CACHE BOOL "HERTZ_STIFFNESS Model")
SET(ENABLE_LUDING OFF CACHE BOOL "LUDING Model")
SET(ENABLE_THORNTON_NING OFF CACHE BOOL "THORNTON_NING Model")

# 4 tangential models
SET(ENABLE_TANGENTIAL_OFF OFF CACHE BOOL "Tangential Model OFF")
SET(ENABLE_TANGENTIAL_HISTORY ON CACHE BOOL "Tangential Model history")
SET(ENABLE_TANGENTIAL_NO_HISTORY ON CACHE BOOL "Tangential Model no_history")
SET(ENABLE_TANGENTIAL_LUDING OFF CACHE BOOL "Tangential Model luding")

# 5 cohesion models
SET(ENABLE_COHESION_OFF OFF CACHE BOOL "Cohesion Model OFF")
SET(ENABLE_COHESION_SJKR ON CACHE BOOL "Cohesion Model SJKR")
SET(ENABLE_COHESION_SJKR2 ON CACHE BOOL "Cohesion Model SJKR2")
SET(ENABLE_COHESION_WASHINO_CAPILLARY_VISCOUS OFF CACHE BOOL "Cohesion Model washino")
SET(ENABLE_COHESION_EASO_CAPILLARY_VISCOUS OFF CACHE BOOL "Cohesion Model easo")

# 6 rolling models
SET(ENABLE_ROLLING_OFF OFF CACHE BOOL "Rolling Model off")
SET(ENABLE_ROLLING_CDT OFF CACHE BOOL "Rolling Model cdt")
SET(ENABLE_ROLLING_EPSD OFF CACHE BOOL "Rolling Model epsd")
SET(ENABLE_ROLLING_EPSD2 ON CACHE BOOL "Rolling Model epsd2")
SET(ENABLE_ROLLING_EPSD3 OFF CACHE BOOL "Rolling Model espd3")
SET(ENABLE_ROLLING_LUDING OFF CACHE BOOL "Rolling Model luding")


# 3 surface models
SET(ENABLE_SURFACE_DEFAULT ON CACHE BOOL "Surface Model default")
SET(ENABLE_SURFACE_SUPERQUADRIC OFF CACHE BOOL "Surface Model Superquadric")
SET(ENABLE_SURFACE_MULTICONTACT OFF CACHE BOOL "Surface Model Multicontact")

SET(USE_VTK OFF CACHE BOOL "Disable dump_vtk by Default")

# Add Compiler Specific Options
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  # using Clang
  MESSAGE(STATUS "Compiler: CLANG")
	SET(OPT_CXX_FLAGS "")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  #############
  # using GCC #
  #############
  MESSAGE(STATUS "Compiler: GCC")
	SET(OPT_CXX_FLAGS "-ffast-math -funroll-loops -march=native")

    # If no BUILD_TYPE is given, choose release for best speed
    IF (NOT CMAKE_BUILD_TYPE)
 		MESSAGE(STATUS "No build type selected, default to Release")
 		SET(CMAKE_BUILD_TYPE "Release")
 	ENDIF()    

elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  ###################
  # using Intel C++ #
  ###################
  MESSAGE(STATUS "Compiler: Intel")
    # fast math is on by default
	SET(OPT_CXX_FLAGS "-O3 -funroll-loops -fstrict-aliasing -W -Wno-uninitialized -march=native -xHost")

    # If no BUILD_TYPE is given, choose release for best speed
    IF (NOT CMAKE_BUILD_TYPE)
 		MESSAGE(STATUS "No build type selected, default to Release")
 		SET(CMAKE_BUILD_TYPE "Release")
 	ENDIF()    

elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  # using Visual Studio C++
  MESSAGE(STATUS "Compiler: MSVC")
	SET(OPT_CXX_FLAGS "")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
endif()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPT_CXX_FLAGS}")

SET(CMAKE_VERBOSE_MAKEFILE 1)
IF(NOT CMAKE_MODULE_PATH)
	SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cMake")
ENDIF()

Include(Macros)
Include(LiggghtsModule)
INCLUDE(Liggghts)

# Assume all *.cpp files are source files
FILE(GLOB liggghts_src "." "*.cpp")

# Write Version.h before every build
ADD_CUSTOM_TARGET(VERSION_H
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/version.cmake
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

# Main Program
ADD_EXECUTABLE(liggghts ${liggghts_src})
ADD_DEPENDENCIES(liggghts VERSION_H)

# Add Styles
SCAN_STYLES()

# Generate Contact models
if (ENABLE_HERTZ)
 ADD_CONTACT_MODEL("HERTZ" "" "" "" "" "")
endif()
if (ENABLE_HOOKE)
 ADD_CONTACT_MODEL("HOOKE" "" "" "" "" "")
endif()
if (ENABLE_HOOKE_HYSTERESIS)
 ADD_CONTACT_MODEL("HOOKE_HYSTERESIS" "" "" "" "" "")
endif()
if (ENABLE_HOOKE_STIFFNESS)
 ADD_CONTACT_MODEL("HOOKE_STIFFNESS" "" "" "" "" "")
endif()
if (ENABLE_EDINBURGH)
 ADD_CONTACT_MODEL("EDINBURGH" "" "" "" "" "")
endif()
if (ENABLE_EDINBURGH_STIFFNESS)
 ADD_CONTACT_MODEL("EDINBURGH_STIFFNESS" "" "" "" "" "")
endif()
if (ENABLE_HERTZ_STIFFNESS)
 ADD_CONTACT_MODEL("HERTZ_STIFFNESS" "" "" "" "" "")
endif()
if (ENABLE_LUDING)
 ADD_CONTACT_MODEL("LUDING" "" "" "" "" "")
endif()
if (ENABLE_THORNTON_NING)
 ADD_CONTACT_MODEL("THORNTON_NING" "" "" "" "" "")
endif()

# 4 tangential models
if (ENABLE_TANGENTIAL_OFF)
 ADD_CONTACT_MODEL("" "TANGENTIAL_OFF" "" "" "" "")
endif()
if (ENABLE_TANGENTIAL_HISTORY)
 ADD_CONTACT_MODEL("" "TANGENTIAL_HISTORY" "" "" "" "")
endif()
if (ENABLE_TANGENTIAL_NO_HISTORY)
 ADD_CONTACT_MODEL("" "TANGENTIAL_NO_HISTORY" "" "" "" "")
endif()
if (ENABLE_TANGENTIAL_LUDING)
 ADD_CONTACT_MODEL("" "TANGENTIAL_LUDING" "" "" "" "")
endif()

# 5 cohesion models
if (ENABLE_COHESION_OFF)
 ADD_CONTACT_MODEL("" "" "COHESION_OFF" "" "")
endif()
if (ENABLE_COHESION_SJKR)
 ADD_CONTACT_MODEL("" "" "COHESION_SJKR" "" "")
endif()
if (ENABLE_COHESION_SJKR2)
 ADD_CONTACT_MODEL("" "" "COHESION_SJKR2" "" "")
endif()
if (ENABLE_COHESION_WASHINO_CAPILLARY_VISCOUS)
  ADD_CONTACT_MODEL("" "" "COHESION_WASHINO_CAPILLARY_VISCOUS" "" "")
endif()
if (ENABLE_COHESION_EASO_CAPILLARY_VISCOUS)
  ADD_CONTACT_MODEL("" "" "COHESION_EASO_CAPILLARY_VISCOUS" "" "")
endif()

# 6 rolling models
if (ENABLE_ROLLING_OFF)
 ADD_CONTACT_MODEL("" "" "" "ROLLING_OFF" "")
endif()
if (ENABLE_ROLLING_CDT)
 ADD_CONTACT_MODEL("" "" "" "ROLLING_CDT" "")
endif()
if (ENABLE_ROLLING_EPSD)
 ADD_CONTACT_MODEL("" "" "" "ROLLING_EPSD" "")
endif()
if (ENABLE_ROLLING_EPSD2)
 ADD_CONTACT_MODEL("" "" "" "ROLLING_EPSD2" "")
endif()
if (ENABLE_ROLLING_EPSD3)
 ADD_CONTACT_MODEL("" "" "" "ROLLING_EPSD3" "")
endif()
if (ENABLE_ROLLING_LUDING)
 ADD_CONTACT_MODEL("" "" "" "ROLLING_LUDING" "")
endif()

# 3 surface models
if (ENABLE_SURFACE_DEFAULT)
 ADD_CONTACT_MODEL("" "" "" "" "SURFACE_DEFAULT")
endif()
if (ENABLE_SURFACE_SUPERQUADRIC)
  ADD_CONTACT_MODEL("" "" "" "" "SURFACE_SUPERQUADRIC")
endif()
if (ENABLE_SURFACE_MULTICONTACT)
 ADD_CONTACT_MODEL("" "" "" "" "SURFACE_MULTICONTACT")
endif()

WRITE_WHITELIST()

# Link to MPI
TARGET_LINK_LIBRARIES(liggghts ${MPI_CXX_LIBRARIES})
#TARGET_LINK_LIBRARIES(libDEM ${MPI_CXX_LIBRARIES})


# If JPEG Library has been defined
IF(JPEG_LIBRARY)
	TARGET_LINK_LIBRARIES(liggghts ${JPEG_LIBRARY})
	#TARGET_LINK_LIBRARIES(libDEM ${JPEG_LIBRARY})
ENDIF()

# If VTK Library has been defined
IF(VTK_LIBRARIES)
	TARGET_LINK_LIBRARIES(liggghts ${VTK_LIBRARIES})
	#TARGET_LINK_LIBRARIES(libDEM ${VTK_LIBRARIES})
ENDIF()

# Include Subdirectories, that contain a CMakeLists.txt
GET_SUBDIRS(dirList CMakeLists.txt)
FOREACH(dir ${dirList})
	ADD_SUBDIRECTORY(${dir})
ENDFOREACH()

# Add Additional Includes
GET_PROPERTY(additional_includes_local GLOBAL PROPERTY additional_includes)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${additional_includes_local})

# Generate style files
GEN_STYLES()

# Link to modules
GET_PROPERTY(active_liggghts_modules_local GLOBAL PROPERTY active_liggghts_modules)
TARGET_LINK_LIBRARIES(liggghts ${active_liggghts_modules_local})
#TARGET_LINK_LIBRARIES(libDEM ${active_liggghts_modules_local})

SET(LIGGGHTS_TARGET_LIBRARIES_LINKED 1)

#define Application static
SET_TARGET_PROPERTIES(liggghts PROPERTIES COMPILE_FLAGS "-DLIBDEM_STATIC_DEFINE -MP")
IF(ENABLE_SQ)
 SET_TARGET_PROPERTIES(liggghts PROPERTIES COMPILE_FLAGS "-DSUPERQUADRIC_ACTIVE_FLAG -DNONSPHERICAL_ACTIVE_FLAG")
 find_package(Boost)
 INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${additional_includes_local} ${Boost_INCLUDE_DIRS})
ENDIF()

# Install binary to destination path
INSTALL(TARGETS liggghts RUNTIME DESTINATION "." COMPONENT runtime)
